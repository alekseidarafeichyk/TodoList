{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","headers","baseURL","authAPI","data","post","delete","get","todolistsApi","title","todolistId","newTitle","put","taskTitle","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","param","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","id","addTodolistTC","todolist","item","changeTodoListTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todoListReducer","fetchTasksTC","tasks","items","removeTaskTC","todoListId","addTaskTC","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","trim","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","saveTitle","onDoubleClick","Task","onTitleChangeCallBack","useCallback","changeTaskTitle","key","className","Completed","Checkbox","checked","newIsDoneValue","changeStatus","New","removeTask","Delete","TodoList","demo","useDispatch","useEffect","tasksForTodoList","taska","jsxTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","createTaskTitle","addTask","changeTodolistTitle","Button","removeTodoList","TodolistsList","todoLists","useSelector","auth","removeTodo","addTodoList","Grid","container","style","padding","spacing","Paper","elevation","to","Alert","makeStyles","theme","root","width","marginTop","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleWare","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cc7c6d54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '628f1297-6b8a-455c-a591-d2e75c4bd3a6'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/'\r\n})\r\n\r\n//api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: string }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMe>>('auth/me')\r\n    }\r\n}\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`);\r\n    },\r\n    updateTodolistTitle(todolistId: string, newTitle: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: newTitle});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskResponse>(`/todo-lists/${todolistId}/tasks`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModuleType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`);\r\n    }\r\n}\r\n\r\n//types\r\ntype AuthMe = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {\r\n    error: string\r\n    field: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTaskResponse = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModuleType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = <D>(error: { message: string }, dispatch:  Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error : error.message ? error.message : 'Some error'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {authAPI, FieldErrorType, LoginParamsType} from '../../api/todolists-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (data, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: any = err\r\n        handleServerAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (data, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n","import {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}));\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n//types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import {todolistsApi, TodolistType} from '../../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todoList/fetchTodolists', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsApi.getTodolists()\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data};\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk('todoList/removeTodolist', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsApi.deleteTodolist(todolistId)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todoList/addTodolist', async (title: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsApi.createTodolist(title)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolist: res.data.data.item}\r\n})\r\nexport const changeTodoListTitleTC = createAsyncThunk('todoList/changeTodoListTitle', async (param : {id: string, title: string}, {dispatch, rejectWithValue}) => {const res = await todolistsApi.updateTodolistTitle(param.id, param.title)\r\n    return  {id: param.id,title: param.title}\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todoList',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValueType, id: string }>) {\r\n            const index = state.findIndex((tl => tl.id === action.payload.id))\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex((tl => tl.id === action.payload.id))\r\n            state[index].entityStatus = action.payload.status\r\n\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex((tl => tl.id === action.payload.id))\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodoListTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex((tl => tl.id === action.payload.id))\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const todoListReducer = slice.reducer\r\nexport const {\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsApi, UpdateTaskModuleType} from '../../api/todolists-api';\r\nimport {AppRootStoreType} from '../../app/store';\r\nimport {setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nlet initialState: TasksStateType = {};\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsApi.getTasks(todolistId)\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolistId, tasks: res.data.items};\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { todoListId: string, taskId: string }, thunkAPI) => {\r\n    const res = await todolistsApi.deleteTask(param.todoListId, param.taskId)\r\n    return {taskId: param.taskId, todoListId: param.todoListId}\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { todolistId: string, taskTitle: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsApi.createTask(param.todolistId, param.taskTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModuleType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStoreType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\r\n\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in this state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModuleType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n    const res = await todolistsApi.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.taskId, todoListId: param.todolistId, model: param.domainModel}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'failed'}))\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.id)\r\n\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n//types\r\nexport type UpdateDomainTaskModuleType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log('Add item form')\r\n\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.charCode === 13) {\r\n            addItem(title)\r\n        }\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField disabled={disabled}\r\n                       variant={'outlined'}\r\n                       value={title}\r\n                       onChange={onTitleChange}\r\n                       onKeyPress={onKeyPressAddTask}\r\n                       error={!!error}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton disabled={disabled}\r\n                        color={'primary'}\r\n                        onClick={onAddItemClick}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditTableSpanPropsType = {\r\n    title: string\r\n    saveTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const  EditableSpan = React.memo ((props: EditTableSpanPropsType) => {\r\n    console.log('Editablespan called')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.saveTitle(title)\r\n        setTitle('')\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ?\r\n        <TextField\r\n            variant={\"outlined\"}\r\n            value={title}\r\n            autoFocus\r\n            onBlur={offEditMode}\r\n            onChange={changeTitle}\r\n        /> :\r\n        <span onDoubleClick={onEditMode}>{props.title}</span>\r\n})\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditableSpan from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api';\r\n\r\n\r\ntype TaskPropsType = {\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }\r\n\r\n    const onTitleChangeCallBack = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle, props.todoListId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n    const deleteTodoList = () => {\r\n        props.removeTask(props.task.id, props.todoListId)\r\n    }\r\n\r\n\r\n    return (<div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onStatusChangeHandler}\r\n            color={'primary'}\r\n        />\r\n        <EditableSpan title={props.task.title} saveTitle={onTitleChangeCallBack}/>\r\n        <IconButton onClick={deleteTodoList}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from '../../../components/AddItemForm/AddItemForm';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api';\r\nimport {FilterValueType, TodolistDomainType} from '../todolists-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchTasksTC} from '../tasks-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValueType, id: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: PropsType) => {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n\r\n    let allTodolistTasks = props.tasks;\r\n    let tasksForTodoList = allTodolistTasks;\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodoList = tasksForTodoList.filter(taska => taska.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodoList = tasksForTodoList.filter(taska => taska.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    let jsxTask = tasksForTodoList.map(t => {\r\n        return <Task\r\n            key={t.id}\r\n            changeStatus={props.changeStatus}\r\n            changeTaskTitle={props.changeTaskTitle}\r\n            removeTask={props.removeTask}\r\n            task={t}\r\n            todoListId={props.todolist.id}\r\n        />\r\n    })\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter('all', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter('active', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter('completed', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n\r\n\r\n    const createTaskTitle = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title);\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todolist.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} saveTitle={changeTodolistTitle}/>\r\n                <Button onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </Button>\r\n            </h3>\r\n\r\n\r\n            <AddItemForm addItem={createTaskTitle}\r\n                         disabled={props.todolist.entityStatus === 'loading'}\r\n            />\r\n            <ul>\r\n                {jsxTask}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    onClick={onAllClickHandler}\r\n                    color={props.todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                    variant={'outlined'}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    onClick={onActiveClickHandler}\r\n                    color={props.todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                    variant={'outlined'}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    onClick={onCompletedClickHandler}\r\n                    variant={'outlined'}\r\n                    color={props.todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStoreType} from '../../app/store';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValueType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer';\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport AddItemForm from '../../components/AddItemForm/AddItemForm';\r\nimport {TodoList} from './Todolist/Todolist';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false,...props}) => {\r\n    const todoLists = useSelector<AppRootStoreType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStoreType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStoreType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskTC({todoListId, taskId}))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC({todolistId, taskTitle}))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskTC({taskId: id,domainModel:{status},todolistId:  todoListId}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, title: string, todoListId: string) => {\r\n        dispatch(updateTaskTC({taskId: id,domainModel:{title},todolistId:  todoListId}))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, id: string) => {\r\n        dispatch(changeTodolistFilterAC({filter: value, id: id}))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodoListTitleTC({id, title}))\r\n    }, [dispatch])\r\n\r\n    const removeTodo = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todoLists.map(tl => {\r\n                return (\r\n                    <Grid item key={tl.id}>\r\n                        <Paper elevation={3} style={{padding: '10px'}}>\r\n                            <TodoList\r\n                                todolist={tl}\r\n                                tasks={tasks[tl.id]}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                removeTodoList={removeTodo}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            /></Paper>\r\n                    </Grid>\r\n                )\r\n            })}</Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStoreType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStoreType,string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error : null}))\r\n    };\r\n\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    <span>{error}</span>\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todoListReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todoListReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleWare)\r\n    }\r\n)\r\n\r\nexport type AppRootStoreType = ReturnType<typeof rootReducer>\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStoreType, useAppDispatch} from '../../app/store';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch  = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStoreType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        }, validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            }\r\n            else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values,formikHelpers) => {\r\n           const action = await dispatch(loginTC(values))\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const  error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field,error.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.errors.email ? <div style={{color:'red'}}>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password ? <div style={{color:'red'}}>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect,} from 'react';\r\nimport './App.css';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n    LinearProgress,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStoreType} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {Route, Switch, Redirect, BrowserRouter} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false,...props}:PropsType) {\r\n\r\n    const status = useSelector<AppRootStoreType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStoreType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStoreType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const logoutHandler = useCallback(()=>{\r\n        dispatch(logoutTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n\r\n                    {isLoggedIn &&   <Button color=\"inherit\"\r\n                                             onClick={logoutHandler}\r\n                    >Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'*'} render={() => <h1>404</h1>}/>\r\n                    </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}